name: PR Command Bot

on:
  issue_comment:
    types: [created]
  pull_request_review_comment:
    types: [created]
  pull_request:
    types: [opened, closed, reopened, edited]

permissions:
  issues: write
  pull-requests: write

jobs:
  process-command:
    runs-on: ubuntu-latest
    steps:
      - name: Process PR Commands
        uses: actions/github-script@v7
        with:
          script: |
            const eventName = context.eventName;
            const repoOwner = context.repo.owner;
            const repoName = context.repo.repo;
            let comment = "", commenter = "", action = "", prNumber = null, prAuthor = "";

            if (eventName === 'issue_comment') {
              if (!context.payload.issue.pull_request) return;
              comment = context.payload.comment?.body?.trim();
              commenter = context.payload.comment?.user?.login;
              prNumber = context.payload.issue.number;
              action = context.payload.action;
              prAuthor = context.payload.issue.user.login;
            } else if (eventName === 'pull_request_review_comment') {
              comment = context.payload.comment?.body?.trim();
              commenter = context.payload.comment?.user?.login;
              prNumber = context.payload.pull_request.number;
              action = context.payload.action;
              prAuthor = context.payload.pull_request.user.login;
            } else if (eventName === 'pull_request') {
              prNumber = context.payload.pull_request.number;
              action = context.payload.action;
              prAuthor = context.payload.pull_request.user.login;
              comment = context.payload.pull_request.body || "";
            }

            if (!comment) return;

            async function isMaintainer(username) {
              try {
                const { data: collaborators } = await github.rest.repos.listCollaborators({
                  owner: repoOwner,
                  repo: repoName,
                  affiliation: 'direct'
                });
                return collaborators.some(collab =>
                  collab.login === username &&
                  (collab.permissions.push || collab.permissions.admin)
                );
              } catch {
                return false;
              }
            }

            async function handleLabel(labelName, color, description) {
              const existingLabels = await github.rest.issues.listLabelsForRepo({
                owner: repoOwner,
                repo: repoName
              });
              const exists = existingLabels.data.some(l => l.name === labelName);
              if (!exists) {
                await github.rest.issues.createLabel({
                  owner: repoOwner,
                  repo: repoName,
                  name: labelName,
                  color: color || "0e8a16",
                  description: description || ""
                });
              }
              await github.rest.issues.addLabels({
                owner: repoOwner,
                repo: repoName,
                issue_number: prNumber,
                labels: [labelName]
              });
            }

            function parseCommand(comment, cmd) {
              const regex = new RegExp(`^\\s*${cmd}\\b`, 'i');
              if (!regex.test(comment)) return null;
              return comment.slice(comment.indexOf(cmd) + cmd.length).trim() || null;
            }

            async function requestReviews(reviewers) {
              const cleanReviewers = reviewers
                .map(r => r.replace(/^@/, '').trim())
                .filter(r => r && r !== prAuthor);

              if (cleanReviewers.length === 0) {
                throw new Error('No valid reviewers (PR author excluded)');
              }

              await github.rest.pulls.requestReviewers({
                owner: repoOwner,
                repo: repoName,
                pull_number: prNumber,
                reviewers: cleanReviewers
              });

              return cleanReviewers;
            }

            try {
              const isPR = !!context.payload.pull_request || !!context.payload.issue?.pull_request;

              // /assign
              if (comment.startsWith("/assign") && isPR && action === "created") {
                let assignee = commenter;
                const param = parseCommand(comment, "/assign");
                if (param && param.startsWith("@")) {
                  assignee = param.substring(1);
                }

                if (!(await isMaintainer(commenter))) {
                  throw new Error("Only maintainers can assign reviewers");
                }

                await requestReviews([assignee]);

                await github.rest.issues.createComment({
                  owner: repoOwner,
                  repo: repoName,
                  issue_number: prNumber,
                  body: `✅ Review requested from @${assignee}`
                });
              }

              // /cc
              if (comment.startsWith("/cc") && action === "created") {
                const reviewers = comment.substring(3).trim().split(/[\s,]+/);
                const requested = await requestReviews(reviewers);
                await github.rest.issues.createComment({
                  owner: repoOwner,
                  repo: repoName,
                  issue_number: prNumber,
                  body: `✅ Review requested from: ${requested.map(r => `@${r}`).join(', ')}`
                });
              }

              // /lgtm
              if (comment.startsWith("/lgtm") && action === "created") {
                if (commenter === prAuthor) {
                  throw new Error("You cannot LGTM your own PR");
                }

                const labels = await github.rest.issues.listLabelsOnIssue({
                  owner: repoOwner,
                  repo: repoName,
                  issue_number: prNumber
                });

                const alreadyAdded = labels.data.some(l => l.name === "LGTM");
                if (!alreadyAdded) {
                  await handleLabel("LGTM", "0e8a16", "Looks Good To Me");
                }
              }

              // /label
              if (comment.startsWith("/label") && action === "created") {
                if (!(await isMaintainer(commenter))) {
                  throw new Error("Only maintainers can label PRs");
                }

                const labelName = parseCommand(comment, "/label");
                if (labelName) {
                  await handleLabel(labelName, "0e8a16");
                }
              }

              // /help
              if (comment.startsWith("/help") && action === "created") {
                await handleLabel("help wanted", "008672", "Extra attention is needed");
              }

              // /needs-triage
              if (comment.startsWith("/needs-triage") && action === "created") {
                await handleLabel("needs-triage", "d73a4a", "Needs triage");
              }

              // /close
              if (comment.startsWith("/close") && action === "created") {
                if (!(await isMaintainer(commenter))) {
                  throw new Error("Only maintainers can close PRs");
                }
                await github.rest.pulls.update({
                  owner: repoOwner,
                  repo: repoName,
                  pull_number: prNumber,
                  state: "closed"
                });
              }

              // /reopen
              if (comment.startsWith("/reopen") && action === "created") {
                if (!(await isMaintainer(commenter))) {
                  throw new Error("Only maintainers can reopen PRs");
                }
                await github.rest.pulls.update({
                  owner: repoOwner,
                  repo: repoName,
                  pull_number: prNumber,
                  state: "open"
                });
              }

              // /kind (from PR body)
              if ((action === "opened" || action === "edited") && eventName === 'pull_request') {
                const description = comment;
                const match = description.match(/\/kind\s*:?[\s]*([^\s]+)/i);
                if (match && match[1]) {
                  const kindLabel = `kind/${match[1].toLowerCase()}`;
                  await handleLabel(kindLabel, "696969", `PR type: ${match[1]}`);
                }
              }

            } catch (error) {
              await github.rest.issues.createComment({
                owner: repoOwner,
                repo: repoName,
                issue_number: prNumber,
                body: `❌ ${error.message}`
              });
            }
